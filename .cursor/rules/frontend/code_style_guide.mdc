---
description: 
globs: 
alwaysApply: true
---
---
description: 代码风格约束规则 - 强制使用命名导出提升代码可维护性
globs: "**/*.{ts,tsx,js,jsx}"
alwaysApply: true
---

# 代码风格约束规则

## Goal

建立一致的代码风格标准，确保代码的可读性、可维护性和团队协作效率。重点规范模块导入导出方式，提升代码质量。

## Critical Rules

### **模块导出规范**
- **强制使用 Named Export**：所有组件、函数、类型都必须使用命名导出
- **禁止 Default Export**：避免使用默认导出，防止命名不一致和重构困难
- **统一导出方式**：保持代码库中导出方式的一致性
- **提升可重构性**：命名导出支持更好的IDE重构和静态分析

### **导出格式标准**
- **组件导出**：React组件必须使用命名导出
- **工具函数导出**：所有工具函数使用命名导出
- **类型定义导出**：TypeScript类型和接口使用命名导出
- **常量导出**：配置常量和枚举使用命名导出

### **导入格式标准**
- **结构化导入**：使用解构导入获取具体的命名导出
- **明确依赖**：导入语句清晰表明具体使用的模块内容
- **避免通配符**：不使用 `import *` 的方式导入
- **类型导入分离**：使用 `import type` 导入仅类型定义

## Examples

<example>

**✅ 正确示例：组件命名导出**

```tsx
// components/Button.tsx
interface ButtonProps {
  children: React.ReactNode;
  onClick?: () => void;
  variant?: 'primary' | 'secondary';
}

export function Button(props: ButtonProps) {
  const { children, onClick, variant = 'primary' } = props;
  return (
    <button 
      className={`btn btn-${variant}`}
      onClick={onClick}
    >
      {children}
    </button>
  );
}

export type { ButtonProps };
```

**✅ 正确示例：Hook命名导出**

```tsx
// hooks/useCounter.ts
interface UseCounterReturn {
  count: number;
  increment: () => void;
  decrement: () => void;
  reset: () => void;
}

export function useCounter(initialValue = 0): UseCounterReturn {
  const [count, setCount] = useState(initialValue);

  const increment = useCallback(() => {
    setCount(prev => prev + 1);
  }, []);

  const decrement = useCallback(() => {
    setCount(prev => prev - 1);
  }, []);

  const reset = useCallback(() => {
    setCount(initialValue);
  }, [initialValue]);

  return {
    count,
    increment,
    decrement,
    reset
  };
}

export type { UseCounterReturn };
```

**✅ 正确示例：工具函数命名导出**

```tsx
// utils/formatters.ts
export function formatCurrency(amount: number, currency = 'CNY'): string {
  return new Intl.NumberFormat('zh-CN', {
    style: 'currency',
    currency
  }).format(amount);
}

export function formatDate(date: Date): string {
  return date.toLocaleDateString('zh-CN');
}

export function truncateText(text: string, maxLength: number): string {
  if (text.length <= maxLength) return text;
  return text.slice(0, maxLength) + '...';
}
```

**✅ 正确示例：类型定义命名导出**

```tsx
// types/user.ts
export interface User {
  id: string;
  username: string;
  email: string;
  avatar?: string;
}

export interface UserSettings {
  theme: 'light' | 'dark';
  language: string;
  notifications: boolean;
}

export type UserRole = 'admin' | 'user' | 'guest';

export enum UserStatus {
  Active = 'active',
  Inactive = 'inactive',
  Banned = 'banned'
}
```

**✅ 正确示例：导入使用**

```tsx
// pages/UserProfile.tsx
import React from 'react';
import { Button } from '@/components/Button';
import { useCounter } from '@/hooks/useCounter';
import { formatDate, truncateText } from '@/utils/formatters';
import type { User, UserSettings } from '@/types/user';

interface UserProfileProps {
  user: User;
  settings: UserSettings;
}

export function UserProfile(props: UserProfileProps) {
  const { user, settings } = props;
  const { count, increment } = useCounter();

  return (
    <div className="user-profile">
      <h1>{truncateText(user.username, 20)}</h1>
      <p>加入时间: {formatDate(new Date())}</p>
      <p>访问次数: {count}</p>
      <Button onClick={increment}>
        增加访问
      </Button>
    </div>
  );
}
```

</example>

<example type="invalid">

**❌ 错误：使用默认导出**

```tsx
// ❌ 错误：组件默认导出
import React from 'react';

interface ButtonProps {
  children: React.ReactNode;
}

const Button = (props: ButtonProps) => {
  return <button>{props.children}</button>;
};

export default Button; // ❌ 应该使用: export { Button };
```

**❌ 错误：Hook默认导出**

```tsx
// ❌ 错误：Hook默认导出
import { useState } from 'react';

const useCounter = (initialValue = 0) => {
  const [count, setCount] = useState(initialValue);
  return { count, setCount };
};

export default useCounter; // ❌ 应该使用: export { useCounter };
```

**❌ 错误：混合导出方式**

```tsx
// ❌ 错误：同时使用默认导出和命名导出
export function formatDate(date: Date): string {
  return date.toLocaleDateString();
}

const formatCurrency = (amount: number) => {
  return `¥${amount}`;
};

export default formatCurrency; // ❌ 应该统一使用命名导出
export { formatDate }; // ❌ 风格不一致
```

**❌ 错误：导入时重命名导致混乱**

```tsx
// ❌ 错误：默认导出导致导入时命名不一致
import MyButton from '@/components/Button'; // ❌ 不同文件可能使用不同名称
import CustomButton from '@/components/Button'; // ❌ 命名混乱
import Btn from '@/components/Button'; // ❌ 无法保证命名一致性

// ✅ 正确：命名导出确保一致性
import { Button } from '@/components/Button'; // ✅ 名称固定，易于搜索和重构
```

**❌ 错误：类型默认导出**

```tsx
// ❌ 错误：类型默认导出
interface User {
  id: string;
  name: string;
}

export default User; // ❌ 应该使用: export type { User };

// ❌ 错误：导入类型时命名不一致
import UserType from '@/types/user'; // ❌ 可能被命名为不同名称
import UserData from '@/types/user'; // ❌ 命名混乱
```

</example>

## Benefits

### **代码质量提升**
- **一致性**：整个代码库使用统一的导出方式
- **可搜索性**：IDE可以准确搜索和定位具体的导出项
- **重构友好**：支持安全的重命名和移动操作

### **团队协作效率**
- **减少混淆**：避免因默认导出导致的命名不一致
- **代码审查**：更容易发现导入导出相关的问题
- **新人友好**：统一的代码风格降低学习成本

### **工具支持**
- **Tree Shaking**：打包工具能更好地进行死代码消除
- **静态分析**：linter和类型检查器能提供更准确的提示
- **自动补全**：IDE能提供更精确的导入建议
