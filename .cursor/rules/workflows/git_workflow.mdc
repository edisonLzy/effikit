---
description: 
globs: 
alwaysApply: false
---
# Git 提交流程自动化规则

## **触发条件**
- 用户明确表达需要执行Git提交代码的意图
- 关键词包括但不限于："提交代码"、"git提交"、"commit代码"、"推送代码"等
- 用户直接要求执行完整的Git提交流程

## **完整提交流程**

### **第一步：暂存变更**

```bash
git add .
```

### **第二步：生成提交信息**
- **严格遵循** [COMMIT_CONVENTION.md](mdc:COMMIT_CONVENTION.md) 提交信息格式规范

### **第三步：更新开发日志**
- 在 [DEVELOP_PROCESS.md](mdc:DEVELOP_PROCESS.md) 文件末尾追加变更内容

- **格式模板**：
  ```markdown
  ## <本次提交内容总结>
  
  ### 变更的文件
  1. 文件路径1 - 变更类型（新增/修改/删除）
  2. 文件路径2 - 变更类型（新增/修改/删除）
  3. ...
  
  ### 本次提交的详细内容总结
  <详细描述本次变更内容、原因、影响等>
  
  ### 相关问题或需求
  - 关联的Issue编号（如有）
  - 解决的问题描述
  - 实现的功能特性
  
  ---
  ```

### **第四步：执行提交**
```bash
git commit -m "<生成的提交信息>"
```

### **第五步：推送到远程**
```bash
git push origin <current-branch>
```

## **执行步骤详解**

### **1. 预检查**
- 检查当前Git状态：`git status`
- 确认有待提交的变更
- 检查当前分支名称
- 确保工作目录干净（除了待提交的变更）

### **2. 变更分析**
- 使用 `git diff --cached` 分析暂存的变更
- 使用 `git diff --name-status` 获取文件变更状态
- 识别变更类型：新增(A)、修改(M)、删除(D)、重命名(R)

### **3. 开发日志记录**

- 整理文件变更列表
- 生成可追溯的详细记录

### **4. 智能提交信息生成**
- 根据变更文件的路径和内容推断scope
- 根据变更性质确定type
- 生成简洁明确的subject
- 如有必要，添加详细的body说明


### **5. 错误处理**
- 如果暂存失败，提示用户检查文件状态
- 如果提交失败，检查提交信息格式
- 如果推送失败，检查网络连接和权限
- 提供具体的错误信息和解决建议