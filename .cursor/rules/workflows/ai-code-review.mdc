# AI Code Review Workflow for Merge/Pull Requests

This document outlines the automated workflow for conducting a code review on a merge/pull request using an AI assistant integrated with `gh` (for GitHub).

## Workflow Steps

### 1. Prerequisite: Check for CLI Tool
- **Trigger**: The code review process is initiated.
- **Action**:
    - Determine the platform (GitHub) from the request URL.
    - Verify that the corresponding command-line tool (`gh`) is installed and available in the system's PATH.
    - Execute the appropriate shell command:
      ```shell
```
- **Success**: The command returns a path to the executable and exits with a status code of 0.
- **Error Handling**: If the command fails, abort the workflow and notify the user.
    
    

### 2. Extract Request ID

- **Trigger**: User provides a request URL and the relevant CLI tool is installed.
- **Action**: Parse the input string to extract the numerical ID.
- **Input & Regex**:
    
    - **GitHub Pull Request**:
        - URL: `"https://github.com/owner/repo/pull/123"`
        - Regex: `\/pull\/(\d+)`
- **Output**: The extracted ID (e.g., `57`, `123`).
- **Error Handling**: If no ID can be extracted, ask the user for a valid URL or ID.

### 3. Fetch Request Diff

- **Trigger**: A valid ID is extracted.
- **Input**: The request ID.
- **Action**:
    - Execute the appropriate shell command:
      ```shell
     # For GitHub
      gh pr diff <id>
      ```
    - Capture the full output (stdout).
- **Output**: A string containing the complete diff.
- **Error Handling**: If the command fails, report the error to the user.

### 4. Analyze Diff and Generate Review Suggestions

- **Trigger**: The diff has been successfully fetched.
- **Input**: The diff string.
- **Action**:
    - The AI model will analyze the diff based on a predefined set of instructions and best practices. The core prompt for this step should include the following directives:
        - "You are an expert code reviewer. Your goal is to provide constructive, clear, and actionable feedback."
        - "Analyze the following code changes for potential issues, including but not limited to: bugs, performance bottlenecks, security vulnerabilities, unclear logic, and deviations from common best practices (e.g., DRY, SOLID)."
        - "Pay attention to the existing code style and conventions within the project and highlight any inconsistencies."
        - "Structure your feedback by file and line number where applicable. **Extract the relevant code snippet for each suggestion.**"
        - "**Crucially, you must only provide suggestions and explanations. Do not write or modify the code yourself.** Your output should be a list of comments and recommendations."
        - "Praise good practices and well-written code where you see it."
- **Output**: A structured list of review comments, suggestions, and questions.

### 5. Add Actionable Comments to Request

- **Trigger**: The review analysis is complete.
- **Input**: The list of generated review suggestions.
- **Action**:
    - For each significant suggestion, post a comment to the merge/pull request.
    - The message should be in Chinese and quote the relevant code.
    
    - **For GitHub**: Use `gh pr review` to add comments. This can be done per-line or as a general review comment. For simplicity, a single summary review is often effective.
      ```shell
      gh pr review <id> --body "$(cat <<'EOF'
代码评审建议 `[file_path]`:

` ``[language]
[code snippet to reference]
` ``

[具体的建议详情]
EOF
)"
      ```
- **Output**: Confirmation for each comment added.
- **Note**: This makes feedback directly visible and actionable for the author in the platform's UI.

### 6. Summarize and Present CR Overview

- **Trigger**: All review suggestions have been processed and posted.
- **Input**: The complete set of review suggestions.
- **Action**:
    - Generate a high-level, concise overview of the code review in Chinese.
    - The overview should include:
        1.  **总体评估**: 对代码质量的简要总结.
        2.  **主要发现**: 以项目符号形式突出最重要的建议.
        3.  **正面反馈**: 简要提及做得好的地方.
- **Output**: The final CR overview is presented to the user in the chat interface.

---
**End of Workflow**
