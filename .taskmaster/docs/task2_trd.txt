# Task 2 - Tool Management UI 技术需求文档 (TRD)

## 1. 概述

### 1.1 任务描述
开发工具管理用户界面，包括搜索功能和可用工具列表，为 EffiKit Chrome 扩展提供核心的工具管理能力。

### 1.2 技术目标
- 实现响应式工具管理界面
- 提供实时搜索和过滤功能
- 支持工具启用/禁用状态管理
- 确保与现有侧边栏架构的无缝集成
- 优化用户体验和性能

## 2. 技术架构

### 2.1 技术栈
- **前端框架**: React 18 + TypeScript
- **路由管理**: React Router DOM (MemoryRouter)
- **UI 组件库**: shadcn/ui + Radix UI
- **样式系统**: Tailwind CSS
- **图标库**: Lucide React
- **构建工具**: Extension.js
- **状态管理**: React Hooks (useState, useEffect)
- **存储**: Chrome Extension Storage API

### 2.2 组件架构
```
SidebarApp (主容器)
├── MemoryRouter (路由容器)
│   ├── Routes (路由配置)
│   │   ├── Route: "/" → ToolManagerPage (工具管理主页)
│   │   ├── Route: "/tool/:toolId" → ToolDetailPage (工具详情页)
│   │   └── Route: "*" → NotFoundPage (404页面)
│   └── Navigation (导航组件)
└── ToolManagerPage (工具管理页面)
    ├── ToolDetailView (工具详情展示区)
    │   ├── ToolIntroduction (工具介绍信息)
    │   └── ToolConfiguration (工具配置选项)
    ├── ToolTabBar (工具标签栏)
    │   ├── ToolTab (单个工具标签)
    │   └── AddToolButton (添加工具按钮)
    └── SearchBar (搜索框)
```

### 2.3 数据模型
```typescript
interface Tool {
  id: string;
  name: string;
  description: string;
  enabled: boolean;
  icon: LucideIcon;
  category?: string;
  version?: string;
  lastUpdated?: Date;
  route: string; // 工具对应的路由路径
  component?: React.ComponentType; // 工具对应的组件
}

interface ToolSettings {
  [toolId: string]: boolean;
}

interface SearchState {
  term: string;
  results: Tool[];
  isSearching: boolean;
}

interface RouteConfig {
  path: string;
  component: React.ComponentType;
  toolId?: string;
}

interface NavigationState {
  currentRoute: string;
  previousRoute?: string;
  history: string[];
}
```

## 3. 功能需求

### 3.1 路由管理功能
- **MemoryRouter**: 使用内存路由，适合 Chrome 扩展环境
- **工具路由**: 每个工具对应独立的路由页面 `/tool/:toolId`
- **路由导航**: 支持前进、后退、直接跳转
- **路由状态**: 保持路由历史和当前状态
- **深度链接**: 支持直接访问特定工具页面

### 3.2 Tool Manager 页面设计（基于设计图）
- **工具详情展示区**: 占据页面主要区域，显示当前选中工具的介绍信息
- **工具标签栏**: 页面底部显示已启用的工具标签，支持快速切换
- **搜索框**: 页面底部提供搜索功能，快速查找工具
- **响应式布局**: 适配侧边栏宽度，确保良好的视觉体验

### 3.3 搜索功能
- **实时搜索**: 用户输入时即时过滤工具标签
- **多字段搜索**: 支持按工具名称和描述搜索
- **搜索结果导航**: 搜索后可直接跳转到对应工具页面
- **搜索历史**: 记录最近搜索记录（可选）
- **清空搜索**: 提供清空搜索框的快捷操作

### 3.4 工具标签栏
- **标签展示**: 以标签形式展示已启用的工具
- **标签切换**: 点击标签切换到对应工具页面
- **标签状态**: 高亮显示当前激活的工具标签
- **标签管理**: 支持启用/禁用工具标签的显示
- **标签排序**: 支持拖拽调整标签顺序

### 3.5 工具详情页面
- **工具介绍**: 显示工具的详细介绍和使用说明
- **工具配置**: 提供工具相关的配置选项
- **工具操作**: 提供工具的启用/禁用、设置等操作
- **状态持久化**: 工具状态和配置保存到 Chrome Storage
- **状态同步**: 跨标签页状态同步

## 4. 页面布局设计

### 4.1 Tool Manager 页面布局（基于设计图）

#### 4.1.1 整体布局结构
```
┌─────────────────────────────────────┐
│              SidebarApp             │
│  ┌─────────────────────────────────┐│
│  │        ToolDetailView           ││
│  │                                 ││
│  │    被选中tool的介绍信息          ││
│  │                                 ││
│  │                                 ││
│  │                                 ││
│  │                                 ││
│  └─────────────────────────────────┘│
│  ┌───┐ ┌───┐ ┌───┐                 │
│  │t1 │ │t2 │ │t3 │  ToolTabBar     │
│  └───┘ └───┘ └───┘                 │
│  ┌─────────────────────────────────┐│
│  │          搜索框                  ││
│  └─────────────────────────────────┘│
└─────────────────────────────────────┘
```

#### 4.1.2 布局规格
- **工具详情展示区**: 占据页面上方 70% 的空间
- **工具标签栏**: 占据页面中下方区域，高度约 40px
- **搜索框**: 占据页面底部区域，高度约 40px
- **整体间距**: 组件间距 8px，内边距 16px

#### 4.1.3 响应式设计
```css
.tool-manager-layout {
  display: flex;
  flex-direction: column;
  height: 100%;
  padding: 16px;
  gap: 8px;
}

.tool-detail-view {
  flex: 1;
  min-height: 0;
  border: 1px solid var(--border);
  border-radius: 8px;
  padding: 16px;
}

.tool-tab-bar {
  display: flex;
  gap: 4px;
  height: 40px;
  overflow-x: auto;
  scrollbar-width: none;
}

.search-bar {
  height: 40px;
  border: 1px solid var(--border);
  border-radius: 8px;
}
```

## 5. 技术实现

### 5.1 核心组件实现

#### 5.1.1 路由配置组件
```typescript
// AppRouter 组件
interface AppRouterProps {
  tools: Tool[];
  enabledTools: Record<string, boolean>;
}

const AppRouter: React.FC<AppRouterProps> = ({ tools, enabledTools }) => {
  return (
    <MemoryRouter initialEntries={['/']}>
      <Routes>
        <Route path="/" element={<ToolManagerPage tools={tools} enabledTools={enabledTools} />} />
        <Route path="/tool/:toolId" element={<ToolDetailPage />} />
        <Route path="*" element={<NotFoundPage />} />
      </Routes>
    </MemoryRouter>
  );
};
```

#### 5.1.2 ToolManagerPage 组件（主页面）
```typescript
interface ToolManagerPageProps {
  tools: Tool[];
  enabledTools: Record<string, boolean>;
}

// 功能特性:
// - 工具详情展示区域
// - 工具标签栏管理
// - 搜索功能集成
// - 路由导航控制
```

#### 5.1.3 ToolDetailView 组件（工具详情展示区）
```typescript
interface ToolDetailViewProps {
  currentTool?: Tool;
  isLoading?: boolean;
}

// 功能特性:
// - 工具介绍信息展示
// - 工具配置选项
// - 空状态处理
// - 加载状态显示
```

#### 5.1.4 ToolTabBar 组件（工具标签栏）
```typescript
interface ToolTabBarProps {
  tools: Tool[];
  enabledTools: Record<string, boolean>;
  currentToolId?: string;
  onToolSelect: (toolId: string) => void;
}

// 功能特性:
// - 标签横向滚动
// - 当前标签高亮
// - 标签拖拽排序
// - 标签右键菜单
```

#### 5.1.5 ToolTab 组件（单个工具标签）
```typescript
interface ToolTabProps {
  tool: Tool;
  isActive: boolean;
  isEnabled: boolean;
  onClick: () => void;
  onToggle: () => void;
}

// 功能特性:
// - 激活状态样式
// - 悬停效果
// - 启用/禁用切换
// - 工具提示
```

#### 5.1.6 SearchBar 组件（搜索框）
```typescript
interface SearchBarProps {
  searchTerm: string;
  onSearchChange: (term: string) => void;
  onToolSelect: (toolId: string) => void;
  tools: Tool[];
  placeholder?: string;
}

// 功能特性:
// - 防抖搜索 (300ms)
// - 搜索结果下拉
// - 键盘导航支持
// - 清空按钮
```

### 5.2 状态管理

#### 5.2.1 本地状态
```typescript
// 路由状态
const navigate = useNavigate();
const location = useLocation();
const { toolId } = useParams<{ toolId: string }>();

// 搜索状态
const [searchTerm, setSearchTerm] = useState('');
const [searchResults, setSearchResults] = useState<Tool[]>([]);
const [isSearching, setIsSearching] = useState(false);

// 工具状态
const [tools, setTools] = useState<Tool[]>([]);
const [enabledTools, setEnabledTools] = useState<Record<string, boolean>>({});
const [currentTool, setCurrentTool] = useState<Tool | null>(null);

// UI 状态
const [isLoading, setIsLoading] = useState(true);
const [error, setError] = useState<string | null>(null);
const [activeTabId, setActiveTabId] = useState<string>('');
```

#### 5.2.2 持久化存储
```typescript
// Chrome Storage API 集成
const saveToolSettings = async (settings: ToolSettings) => {
  await chrome.storage.local.set({ toolSettings: settings });
};

const loadToolSettings = async (): Promise<ToolSettings> => {
  const result = await chrome.storage.local.get('toolSettings');
  return result.toolSettings || {};
};
```

### 5.3 路由管理实现

#### 5.3.1 路由导航逻辑
```typescript
// 路由导航 Hook
const useToolNavigation = () => {
  const navigate = useNavigate();
  const location = useLocation();
  
  const navigateToTool = useCallback((toolId: string) => {
    navigate(`/tool/${toolId}`);
  }, [navigate]);
  
  const navigateToHome = useCallback(() => {
    navigate('/');
  }, [navigate]);
  
  const getCurrentToolId = useCallback(() => {
    const match = location.pathname.match(/^\/tool\/(.+)$/);
    return match ? match[1] : null;
  }, [location.pathname]);
  
  return {
    navigateToTool,
    navigateToHome,
    getCurrentToolId,
    currentPath: location.pathname
  };
};
```

#### 5.3.2 路由状态同步
```typescript
// 路由状态与工具状态同步
const useRouteSync = (tools: Tool[], enabledTools: Record<string, boolean>) => {
  const { getCurrentToolId, navigateToTool } = useToolNavigation();
  const [currentTool, setCurrentTool] = useState<Tool | null>(null);
  
  useEffect(() => {
    const toolId = getCurrentToolId();
    if (toolId) {
      const tool = tools.find(t => t.id === toolId);
      setCurrentTool(tool || null);
    } else {
      // 默认选择第一个启用的工具
      const firstEnabledTool = tools.find(t => enabledTools[t.id]);
      if (firstEnabledTool) {
        setCurrentTool(firstEnabledTool);
        navigateToTool(firstEnabledTool.id);
      }
    }
  }, [tools, enabledTools, getCurrentToolId, navigateToTool]);
  
  return { currentTool, setCurrentTool };
};
```

### 5.4 搜索算法

#### 5.4.1 模糊搜索实现
```typescript
const fuzzySearch = (tools: Tool[], searchTerm: string): Tool[] => {
  if (!searchTerm.trim()) return tools;
  
  const normalizedTerm = searchTerm.toLowerCase();
  
  return tools.filter(tool => {
    const nameMatch = tool.name.toLowerCase().includes(normalizedTerm);
    const descMatch = tool.description.toLowerCase().includes(normalizedTerm);
    return nameMatch || descMatch;
  }).sort((a, b) => {
    // 优先显示名称匹配的结果
    const aNameMatch = a.name.toLowerCase().includes(normalizedTerm);
    const bNameMatch = b.name.toLowerCase().includes(normalizedTerm);
    
    if (aNameMatch && !bNameMatch) return -1;
    if (!aNameMatch && bNameMatch) return 1;
    return 0;
  });
};
```

#### 5.4.2 搜索防抖
```typescript
const useDebounce = (value: string, delay: number) => {
  const [debouncedValue, setDebouncedValue] = useState(value);
  
  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);
    
    return () => clearTimeout(handler);
  }, [value, delay]);
  
  return debouncedValue;
};
```

## 6. 性能优化

### 6.1 渲染优化
- **路由懒加载**: 按需加载工具组件

### 6.2 搜索优化
- **防抖处理**: 减少搜索频率
- **结果缓存**: 缓存搜索结果
- **增量搜索**: 基于上次结果进行过滤

### 6.3 路由优化
- **路由预加载**: 预加载常用工具组件
- **路由缓存**: 缓存已访问的路由组件
- **导航优化**: 优化路由切换动画

### 6.4 存储优化
- **批量更新**: 合并多个状态更新
- **压缩存储**: 优化存储数据结构
- **异步操作**: 非阻塞的存储操作

## 7. 用户体验

### 7.1 交互设计
- **即时反馈**: 操作后立即显示状态变化
- **加载状态**: 显示加载指示器
- **错误处理**: 友好的错误提示
- **空状态**: 优雅的空状态展示
- **路由动画**: 平滑的页面切换动画

### 7.2 可访问性
- **键盘导航**: 支持 Tab 键导航和方向键切换标签
- **屏幕阅读器**: ARIA 标签支持
- **焦点管理**: 合理的焦点顺序和路由焦点管理
- **颜色对比**: 满足 WCAG 标准

### 7.3 响应式设计
- **自适应布局**: 适配不同侧边栏宽度
- **触摸友好**: 适当的点击区域大小
- **字体缩放**: 支持系统字体缩放
- **标签滚动**: 工具标签栏支持横向滚动

## 8. 测试策略

### 8.1 单元测试
```typescript
// 路由组件测试
describe('AppRouter', () => {
  it('should navigate to tool page', () => {
    // 测试路由导航
  });
  
  it('should handle invalid routes', () => {
    // 测试404处理
  });
});

// 工具管理页面测试
describe('ToolManagerPage', () => {
  it('should display tool details', () => {
    // 测试工具详情展示
  });
  
  it('should handle tab switching', () => {
    // 测试标签切换
  });
});

// 搜索组件测试
describe('SearchBar', () => {
  it('should filter tools on search input', () => {
    // 测试搜索功能
  });
  
  it('should navigate to selected tool', () => {
    // 测试搜索导航
  });
});
```

### 8.2 集成测试
- **路由集成**: 测试路由与组件的集成
- **Chrome Extension API**: 测试存储操作
- **跨组件通信**: 测试组件间数据流
- **状态同步**: 测试状态持久化

### 8.3 用户测试
- **路由导航**: 测试页面切换的流畅性
- **搜索性能**: 测试大量工具时的搜索响应
- **标签操作**: 测试标签切换和管理功能
- **错误恢复**: 测试异常情况的处理

## 9. 安全考虑

### 9.1 输入验证
- **XSS 防护**: 对用户输入进行转义
- **注入攻击**: 防止代码注入
- **数据验证**: 验证存储数据的完整性
- **路由安全**: 验证路由参数的合法性

### 9.2 权限控制
- **最小权限**: 只请求必要的 Chrome 权限
- **数据隔离**: 工具数据与其他数据隔离
- **安全存储**: 敏感配置的安全存储
- **路由权限**: 控制工具页面的访问权限

## 10. 部署和维护

### 10.1 依赖项配置
```json
{
  "dependencies": {
    "react-router-dom": "^7.6.2"
  }
}
```

### 10.2 构建配置
```json
{
  "scripts": {
    "dev": "extension dev",
    "build": "extension build",
    "test": "jest",
    "lint": "eslint . --fix"
  }
}
```

### 10.3 安装命令
```bash
# 使用 pnpm 安装 React Router DOM
pnpm add react-router-dom

# 安装类型定义（如果需要）
pnpm add -D @types/react-router-dom
```

## 12. 交付标准

### 12.1 功能完整性
- ✅ 路由导航功能正常工作
- ✅ 工具详情页面正确显示
- ✅ 工具标签栏功能正常
- ✅ 搜索功能正常工作
- ✅ 状态持久化正常
- ✅ 响应式设计适配

### 12.2 代码质量
- ✅ TypeScript 类型覆盖 100%
- ✅ ESLint 检查通过
- ✅ 单元测试覆盖率 > 80%
- ✅ 路由测试通过
- ✅ 性能测试通过
- ✅ 可访问性测试通过

### 12.3 文档完整性
- ✅ 组件 API 文档
- ✅ 路由配置文档
- ✅ 使用说明文档
- ✅ 故障排除指南
- ✅ 更新日志

---

**文档版本**: v1.0  
**创建日期**: 2024-12-19  
**最后更新**: 2024-12-19  
**负责人**: 前端开发团队 